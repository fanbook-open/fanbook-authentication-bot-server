spring:
  datasource:
    url: jdbc:mysql://0.0.0.0:3306/db_name?useSSL=false&useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&rewriteBatchedStatements=true
    username: userName
    password: password
    driver-class-name: com.mysql.cj.jdbc.Driver
    druid:
      # 配置初始化大小、最小、最大
      initial-size: 20
      minIdle: 10
      max-active: 500
      # 配置获取连接等待超时的时间(单位：毫秒)
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 2000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 600000
      max-evictable-idle-time-millis: 900000
      # 用来测试连接是否可用的SQL语句,默认值每种数据库都不相同,这是mysql
      validationQuery: select 1
      # 应用向连接池申请连接，并且testOnBorrow为false时，连接池将会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用
      testWhileIdle: true
      # 如果为true，默认是false，应用向连接池申请连接时，连接池会判断这条连接是否是可用的
      testOnBorrow: false
      # 如果为true（默认false），当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用
      testOnReturn: false
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle
      poolPreparedStatements: true
      # 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true，
      # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，
      # 可以把这个数值配置大一些，比如说100
      maxOpenPreparedStatements: 20
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作
      keepAlive: true
      # Spring 监控，利用aop 对指定接口的执行时间，jdbc数进行记录
      aop-patterns: "com.dzzh.big_screen.mapper.*"
      ########### 启用内置过滤器（第一个 stat必须，否则监控不到SQL）##########
      #      filters: stat,wall,log4j2
      filters: wall,log4j2
      # 自己配置监控统计拦截的filter
##fanbook配置
fb:
  bot:
    ##机器人token
    token: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    ##机器人ID
    id: 111111111111111
  open:
    ##fanbook应用信息 用于授权
    client: 111111111111111111
    sceret: xxxxxxxxxxxxxxxxxxxx
    redirect_uri: https://open.fanbook.mobi/mp/138519745866498048/350605809958264834/
    fanbook_oauth_page: https://a1.fanbook.mobi/open/oauth2/authorize?response_type=code&client_id=${fb.open.client}&state=3
    api:
      getMe: https://a1.fanbook.mobi/open/api/user/getMe
      getToken: https://a1.fanbook.mobi/open/oauth2/token
      getPrivateChat: https://a1.fanbook.mobi/api/bot/botTOKEN/getPrivateChat
      sendMessage: https://a1.fanbook.mobi/api/bot/botTOKEN/sendMessage
      setMemberRoles: https://a1.fanbook.mobi/api/bot/${fb.bot.token}/setMemberRoles
      getChatMember: https://a1.fanbook.mobi/api/bot/${fb.bot.token}/getChatMember
      getGuildRoles: https://a1.fanbook.mobi/api/bot/${fb.bot.token}/getGuildRoles
      editMessageText: https://a1.fanbook.mobi/api/bot/botTOKEN/editMessageText
      sendReaction: https://a1.fanbook.mobi/api/bot/botTOKEN/sendReaction
      getUpdates: https://a1.fanbook.mobi/api/bot/botTOKEN/getUpdates
      getGuilds: https://a1.fanbook.mobi/open/api/guild/getGuilds
      link: https://a1.fanbook.mobi/open/api/user/link
##腾讯文档配置信息
tx:
  doc:
    clientId: xxxxxxxxxxxxxxxxxx
    secret: xxxxxxxxxxxxxxxx
    api:
      oauth:
        token: https://docs.qq.com/oauth/v2/token
        userinfo: https://docs.qq.com/oauth/v2/userinfo
      export:
        converter: https://docs.qq.com/openapi/drive/v2/util/converter
        async: https://docs.qq.com/openapi/drive/v2/files/fileID/async-export
        progress: https://docs.qq.com/openapi/drive/v2/files/fileID/export-progress

